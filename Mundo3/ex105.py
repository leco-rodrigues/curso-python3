# Analisano e gerando DicionÃ¡rios:
    # FaÃ§a um programa que tenha um funÃ§Ã£o chamada notas() que pode receber vÃ¡rias notas de alunos e vai retornar um dicionÃ¡rio com as seguintes informaÃ§Ãµes:
        # - Quantidade de notas
        # - A maior nota
        # - A menor nota
        # - A mÃ©dia da turma
        # - A situaÃ§Ã£o (opcional)
    # Adicione tambÃ©m as docstrings da funÃ§Ã£o.

def display_exit_message(message: str = None) -> None:
    if (not message):
        message = "Exiting program... Thanks for using it! ðŸ˜„"
    print(message)


# Passo 1: 
def notas(*notas: float, situacao: bool = False) -> dict[str: object]:
    """
    -> Cria e retorna um dicionÃ¡rio com dados baseados nas notas fornecidas.

    ParÃ¢metros:
        :notas: tupla contendo todas as notas fornecidas
        :situacao: valor booleano para exibir ou nÃ£o a situaÃ§Ã£o da mÃ©dia da turma

    Returns:
        dict[str: object]: dicionÃ¡rio contendo todos os dados
    """
    total_notas: float = len(notas)
    maior_nota: float = max(notas)
    menor_nota: float = min(notas)
    soma_notas: float = 0
    for nota in notas:
        soma_notas += nota
    media_turma = soma_notas / total_notas

    notas_dict: dict[str: object] = {}
    notas_dict["Total"] = total_notas
    notas_dict["Maior"] = maior_nota
    notas_dict["Menor"] = menor_nota
    notas_dict["MÃ©dia"] = media_turma

    if situacao:
        if media_turma >= 8:
            situacao_turma: str = "Ã“tima"
        elif media_turma >= 6:
            situacao_turma = "Boa"
        else:
            situacao_turma = "Ruim"
        notas_dict["SituaÃ§Ã£o"] = situacao_turma

    return notas_dict


# Passo 2: Exibir o resultado
print(notas(5, 2, 3, 5, 8, situacao=True))

# Passo 3: Exibir mensagem de encerramento
display_exit_message()
# -------------------| AULA 21 - FUNÃ‡Ã•ES (PARTE 2) | DESAFIO [105]
